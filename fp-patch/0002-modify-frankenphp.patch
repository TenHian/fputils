From 4a655af87ce352f411c8c52827c58fea33601cb4 Mon Sep 17 00:00:00 2001
From: TenHian <tenhian.cn@gmail.com>
Date: Wed, 17 Jul 2024 14:38:39 +0800
Subject: [PATCH 2/3] modify frankenphp

---
 C-Thread-Pool/thpool.c    | 759 ++++++++++++++++++++------------------
 C-Thread-Pool/thpool.h    |  25 +-
 caddy/frankenphp/Makefile |  13 +
 caddy/go.mod              |   2 +-
 frankenphp.c              |  23 +-
 frankenphp.go             |  14 +-
 go.mod                    |   2 +-
 7 files changed, 458 insertions(+), 380 deletions(-)
 create mode 100644 caddy/frankenphp/Makefile

diff --git a/C-Thread-Pool/thpool.c b/C-Thread-Pool/thpool.c
index df4262c..8ca26b4 100644
--- a/C-Thread-Pool/thpool.c
+++ b/C-Thread-Pool/thpool.c
@@ -4,28 +4,27 @@
  * Description:  Library providing a threading pool where you can add
  *               work. For usage, check the thpool.h file or README.md
  *
- */
-/** @file thpool.h */ /*
-                       *
-                       ********************************/
+ *//** @file thpool.h *//*
+ *
+ ********************************/
 
 #if defined(__APPLE__)
 #include <AvailabilityMacros.h>
-#else
-#ifndef _POSIX_C_SOURCE
-#define _POSIX_C_SOURCE 200809L
-#endif
-#ifndef _XOPEN_SOURCE
-#define _XOPEN_SOURCE 500
-#endif
+// #else
+// #ifndef _POSIX_C_SOURCE
+// #define _POSIX_C_SOURCE 200809L
+// #endif
+// #ifndef _XOPEN_SOURCE
+// #define _XOPEN_SOURCE 500
+// #endif
 #endif
-#include <errno.h>
-#include <pthread.h>
-#include <signal.h>
+#include <unistd.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
+#include <pthread.h>
+#include <errno.h>
 #include <time.h>
-#include <unistd.h>
 #if defined(__linux__)
 #include <sys/prctl.h>
 #endif
@@ -55,469 +54,523 @@
 #define TOSTRING(x) STRINGIFY(x)
 
 static volatile int threads_keepalive;
-static volatile int threads_on_hold;
+// disable thpool pause function module
+// static volatile int threads_on_hold;
+
+
 
 /* ========================== STRUCTURES ============================ */
 
+
 /* Binary semaphore */
 typedef struct bsem {
-  pthread_mutex_t mutex;
-  pthread_cond_t cond;
-  int v;
+	pthread_mutex_t mutex;
+	pthread_cond_t   cond;
+	int v;
 } bsem;
 
+
 /* Job */
-typedef struct job {
-  struct job *prev;            /* pointer to previous job   */
-  void (*function)(void *arg); /* function pointer          */
-  void *arg;                   /* function's argument       */
+typedef struct job{
+	struct job*  prev;                   /* pointer to previous job   */
+	void   (*function)(void* arg);       /* function pointer          */
+	void*  arg;                          /* function's argument       */
 } job;
 
+
 /* Job queue */
-typedef struct jobqueue {
-  pthread_mutex_t rwmutex; /* used for queue r/w access */
-  job *front;              /* pointer to front of queue */
-  job *rear;               /* pointer to rear  of queue */
-  bsem *has_jobs;          /* flag as binary semaphore  */
-  int len;                 /* number of jobs in queue   */
+typedef struct jobqueue{
+	pthread_mutex_t rwmutex;             /* used for queue r/w access */
+	job  *front;                         /* pointer to front of queue */
+	job  *rear;                          /* pointer to rear  of queue */
+	bsem *has_jobs;                      /* flag as binary semaphore  */
+	int   len;                           /* number of jobs in queue   */
 } jobqueue;
 
+
 /* Thread */
-typedef struct thread {
-  int id;                   /* friendly id               */
-  pthread_t pthread;        /* pointer to actual thread  */
-  struct thpool_ *thpool_p; /* access to thpool          */
+typedef struct thread{
+	int       id;                        /* friendly id               */
+	pthread_t pthread;                   /* pointer to actual thread  */
+	struct thpool_* thpool_p;            /* access to thpool          */
 } thread;
 
+
 /* Threadpool */
-typedef struct thpool_ {
-  thread **threads;                 /* pointer to threads        */
-  volatile int num_threads_alive;   /* threads currently alive   */
-  volatile int num_threads_working; /* threads currently working */
-  pthread_mutex_t thcount_lock;     /* used for thread count etc */
-  pthread_cond_t threads_all_idle;  /* signal to thpool_wait     */
-  jobqueue jobqueue;                /* job queue                 */
+typedef struct thpool_{
+	thread**   threads;                  /* pointer to threads        */
+	volatile int num_threads_alive;      /* threads currently alive   */
+	volatile int num_threads_working;    /* threads currently working */
+	pthread_mutex_t  thcount_lock;       /* used for thread count etc */
+	pthread_cond_t  threads_all_idle;    /* signal to thpool_wait     */
+	jobqueue  jobqueue;                  /* job queue                 */
 } thpool_;
 
+
+
+
+
 /* ========================== PROTOTYPES ============================ */
 
-static int thread_init(thpool_ *thpool_p, struct thread **thread_p, int id);
-static void *thread_do(struct thread *thread_p);
-static void thread_hold(int sig_id);
-static void thread_destroy(struct thread *thread_p);
 
-static int jobqueue_init(jobqueue *jobqueue_p);
-static void jobqueue_clear(jobqueue *jobqueue_p);
-static void jobqueue_push(jobqueue *jobqueue_p, struct job *newjob_p);
-static struct job *jobqueue_pull(jobqueue *jobqueue_p);
-static void jobqueue_destroy(jobqueue *jobqueue_p);
+static int  thread_init(thpool_* thpool_p, struct thread** thread_p, int id);
+static void* thread_do(struct thread* thread_p);
+// disable thpool pause function module
+// static void  thread_hold(int sig_id);
+static void  thread_destroy(struct thread* thread_p);
+
+static int   jobqueue_init(jobqueue* jobqueue_p);
+static void  jobqueue_clear(jobqueue* jobqueue_p);
+static void  jobqueue_push(jobqueue* jobqueue_p, struct job* newjob_p);
+static struct job* jobqueue_pull(jobqueue* jobqueue_p);
+static void  jobqueue_destroy(jobqueue* jobqueue_p);
+
+static void  bsem_init(struct bsem *bsem_p, int value);
+static void  bsem_reset(struct bsem *bsem_p);
+static void  bsem_post(struct bsem *bsem_p);
+static void  bsem_post_all(struct bsem *bsem_p);
+static void  bsem_wait(struct bsem *bsem_p);
+
+
+
 
-static void bsem_init(struct bsem *bsem_p, int value);
-static void bsem_reset(struct bsem *bsem_p);
-static void bsem_post(struct bsem *bsem_p);
-static void bsem_post_all(struct bsem *bsem_p);
-static void bsem_wait(struct bsem *bsem_p);
 
 /* ========================== THREADPOOL ============================ */
 
+
 /* Initialise thread pool */
-struct thpool_ *thpool_init(int num_threads) {
-
-  threads_on_hold = 0;
-  threads_keepalive = 1;
-
-  if (num_threads < 0) {
-    num_threads = 0;
-  }
-
-  /* Make new thread pool */
-  thpool_ *thpool_p;
-  thpool_p = (struct thpool_ *)malloc(sizeof(struct thpool_));
-  if (thpool_p == NULL) {
-    err("thpool_init(): Could not allocate memory for thread pool\n");
-    return NULL;
-  }
-  thpool_p->num_threads_alive = 0;
-  thpool_p->num_threads_working = 0;
-
-  /* Initialise the job queue */
-  if (jobqueue_init(&thpool_p->jobqueue) == -1) {
-    err("thpool_init(): Could not allocate memory for job queue\n");
-    free(thpool_p);
-    return NULL;
-  }
-
-  /* Make threads in pool */
-  thpool_p->threads =
-      (struct thread **)malloc(num_threads * sizeof(struct thread *));
-  if (thpool_p->threads == NULL) {
-    err("thpool_init(): Could not allocate memory for threads\n");
-    jobqueue_destroy(&thpool_p->jobqueue);
-    free(thpool_p);
-    return NULL;
-  }
-
-  pthread_mutex_init(&(thpool_p->thcount_lock), NULL);
-  pthread_cond_init(&thpool_p->threads_all_idle, NULL);
-
-  /* Thread init */
-  int n;
-  for (n = 0; n < num_threads; n++) {
-    thread_init(thpool_p, &thpool_p->threads[n], n);
+struct thpool_* thpool_init(int num_threads){
+
+	// disable thpool pause function module
+	// threads_on_hold   = 0;
+	threads_keepalive = 1;
+
+	if (num_threads < 0){
+		num_threads = 0;
+	}
+
+	/* Make new thread pool */
+	thpool_* thpool_p;
+	thpool_p = (struct thpool_*)malloc(sizeof(struct thpool_));
+	if (thpool_p == NULL){
+		err("thpool_init(): Could not allocate memory for thread pool\n");
+		return NULL;
+	}
+	thpool_p->num_threads_alive   = 0;
+	thpool_p->num_threads_working = 0;
+
+	/* Initialise the job queue */
+	if (jobqueue_init(&thpool_p->jobqueue) == -1){
+		err("thpool_init(): Could not allocate memory for job queue\n");
+		free(thpool_p);
+		return NULL;
+	}
+
+	/* Make threads in pool */
+	thpool_p->threads = (struct thread**)malloc(num_threads * sizeof(struct thread *));
+	if (thpool_p->threads == NULL){
+		err("thpool_init(): Could not allocate memory for threads\n");
+		jobqueue_destroy(&thpool_p->jobqueue);
+		free(thpool_p);
+		return NULL;
+	}
+
+	pthread_mutex_init(&(thpool_p->thcount_lock), NULL);
+	pthread_cond_init(&thpool_p->threads_all_idle, NULL);
+
+	/* Thread init */
+	int n;
+	for (n=0; n<num_threads; n++){
+		thread_init(thpool_p, &thpool_p->threads[n], n);
 #if THPOOL_DEBUG
-    printf("THPOOL_DEBUG: Created thread %d in pool \n", n);
+			printf("THPOOL_DEBUG: Created thread %d in pool \n", n);
 #endif
-  }
+	}
 
-  /* Wait for threads to initialize */
-  while (thpool_p->num_threads_alive != num_threads) {
-  }
+	/* Wait for threads to initialize */
+	while (thpool_p->num_threads_alive != num_threads) {}
 
-  return thpool_p;
+	return thpool_p;
 }
 
+
 /* Add work to the thread pool */
-int thpool_add_work(thpool_ *thpool_p, void (*function_p)(void *),
-                    void *arg_p) {
-  job *newjob;
+int thpool_add_work(thpool_* thpool_p, void (*function_p)(void*), void* arg_p){
+	job* newjob;
 
-  newjob = (struct job *)malloc(sizeof(struct job));
-  if (newjob == NULL) {
-    err("thpool_add_work(): Could not allocate memory for new job\n");
-    return -1;
-  }
+	newjob=(struct job*)malloc(sizeof(struct job));
+	if (newjob==NULL){
+		err("thpool_add_work(): Could not allocate memory for new job\n");
+		return -1;
+	}
 
-  /* add function and argument */
-  newjob->function = function_p;
-  newjob->arg = arg_p;
+	/* add function and argument */
+	newjob->function=function_p;
+	newjob->arg=arg_p;
 
-  /* add job to queue */
-  jobqueue_push(&thpool_p->jobqueue, newjob);
+	/* add job to queue */
+	jobqueue_push(&thpool_p->jobqueue, newjob);
 
-  return 0;
+	return 0;
 }
 
+
 /* Wait until all jobs have finished */
-void thpool_wait(thpool_ *thpool_p) {
-  pthread_mutex_lock(&thpool_p->thcount_lock);
-  while (thpool_p->jobqueue.len || thpool_p->num_threads_working) {
-    pthread_cond_wait(&thpool_p->threads_all_idle, &thpool_p->thcount_lock);
-  }
-  pthread_mutex_unlock(&thpool_p->thcount_lock);
+void thpool_wait(thpool_* thpool_p){
+	pthread_mutex_lock(&thpool_p->thcount_lock);
+	while (thpool_p->jobqueue.len || thpool_p->num_threads_working) {
+		pthread_cond_wait(&thpool_p->threads_all_idle, &thpool_p->thcount_lock);
+	}
+	pthread_mutex_unlock(&thpool_p->thcount_lock);
 }
 
+
 /* Destroy the threadpool */
-void thpool_destroy(thpool_ *thpool_p) {
-  /* No need to destroy if it's NULL */
-  if (thpool_p == NULL)
-    return;
-
-  volatile int threads_total = thpool_p->num_threads_alive;
-
-  /* End each thread 's infinite loop */
-  threads_keepalive = 0;
-
-  /* Give one second to kill idle threads */
-  double TIMEOUT = 1.0;
-  time_t start, end;
-  double tpassed = 0.0;
-  time(&start);
-  while (tpassed < TIMEOUT && thpool_p->num_threads_alive) {
-    bsem_post_all(thpool_p->jobqueue.has_jobs);
-    time(&end);
-    tpassed = difftime(end, start);
-  }
-
-  /* Poll remaining threads */
-  while (thpool_p->num_threads_alive) {
-    bsem_post_all(thpool_p->jobqueue.has_jobs);
-    sleep(1);
-  }
-
-  /* Job queue cleanup */
-  jobqueue_destroy(&thpool_p->jobqueue);
-  /* Deallocs */
-  int n;
-  for (n = 0; n < threads_total; n++) {
-    thread_destroy(thpool_p->threads[n]);
-  }
-  free(thpool_p->threads);
-  free(thpool_p);
+void thpool_destroy(thpool_* thpool_p){
+	/* No need to destroy if it's NULL */
+	if (thpool_p == NULL) return ;
+
+	volatile int threads_total = thpool_p->num_threads_alive;
+
+	/* End each thread 's infinite loop */
+	threads_keepalive = 0;
+
+	/* Give one second to kill idle threads */
+	double TIMEOUT = 1.0;
+	time_t start, end;
+	double tpassed = 0.0;
+	time (&start);
+	while (tpassed < TIMEOUT && thpool_p->num_threads_alive){
+		bsem_post_all(thpool_p->jobqueue.has_jobs);
+		time (&end);
+		tpassed = difftime(end,start);
+	}
+
+	/* Poll remaining threads */
+	while (thpool_p->num_threads_alive){
+		bsem_post_all(thpool_p->jobqueue.has_jobs);
+		sleep(1);
+	}
+
+	/* Job queue cleanup */
+	jobqueue_destroy(&thpool_p->jobqueue);
+	/* Deallocs */
+	int n;
+	for (n=0; n < threads_total; n++){
+		thread_destroy(thpool_p->threads[n]);
+	}
+	free(thpool_p->threads);
+	free(thpool_p);
 }
 
-/* Pause all threads in threadpool */
-void thpool_pause(thpool_ *thpool_p) {
-  int n;
-  for (n = 0; n < thpool_p->num_threads_alive; n++) {
-    pthread_kill(thpool_p->threads[n]->pthread, SIGUSR1);
-  }
-}
+// disable thpool pause function module
+// /* Pause all threads in threadpool */
+// void thpool_pause(thpool_* thpool_p) {
+// 	int n;
+// 	for (n=0; n < thpool_p->num_threads_alive; n++){
+// 		pthread_kill(thpool_p->threads[n]->pthread, SIGUSR1);
+// 	}
+// }
 
-/* Resume all threads in threadpool */
-void thpool_resume(thpool_ *thpool_p) {
-  // resuming a single threadpool hasn't been
-  // implemented yet, meanwhile this suppresses
-  // the warnings
-  (void)thpool_p;
 
-  threads_on_hold = 0;
-}
+// /* Resume all threads in threadpool */
+// void thpool_resume(thpool_* thpool_p) {
+//     // resuming a single threadpool hasn't been
+//     // implemented yet, meanwhile this suppresses
+//     // the warnings
+//     (void)thpool_p;
+
+// 	threads_on_hold = 0;
+// }
 
-int thpool_num_threads_working(thpool_ *thpool_p) {
-  return thpool_p->num_threads_working;
+
+int thpool_num_threads_working(thpool_* thpool_p){
+	return thpool_p->num_threads_working;
 }
 
+
+
+
+
 /* ============================ THREAD ============================== */
 
+
 /* Initialize a thread in the thread pool
  *
  * @param thread        address to the pointer of the thread to be created
  * @param id            id to be given to the thread
  * @return 0 on success, -1 otherwise.
  */
-static int thread_init(thpool_ *thpool_p, struct thread **thread_p, int id) {
+static int thread_init (thpool_* thpool_p, struct thread** thread_p, int id){
 
-  *thread_p = (struct thread *)malloc(sizeof(struct thread));
-  if (*thread_p == NULL) {
-    err("thread_init(): Could not allocate memory for thread\n");
-    return -1;
-  }
+	*thread_p = (struct thread*)malloc(sizeof(struct thread));
+	if (*thread_p == NULL){
+		err("thread_init(): Could not allocate memory for thread\n");
+		return -1;
+	}
 
-  (*thread_p)->thpool_p = thpool_p;
-  (*thread_p)->id = id;
+	(*thread_p)->thpool_p = thpool_p;
+	(*thread_p)->id       = id;
 
-  pthread_create(&(*thread_p)->pthread, NULL, (void *(*)(void *))thread_do,
-                 (*thread_p));
-  pthread_detach((*thread_p)->pthread);
-  return 0;
+	pthread_create(&(*thread_p)->pthread, NULL, (void * (*)(void *)) thread_do, (*thread_p));
+	pthread_detach((*thread_p)->pthread);
+	return 0;
 }
 
-/* Sets the calling thread on hold */
-static void thread_hold(int sig_id) {
-  (void)sig_id;
-  threads_on_hold = 1;
-  while (threads_on_hold) {
-    sleep(1);
-  }
-}
+// disable thpool pause function module
+// /* Sets the calling thread on hold */
+// static void thread_hold(int sig_id) {
+//     (void)sig_id;
+// 	threads_on_hold = 1;
+// 	while (threads_on_hold){
+// 		sleep(1);
+// 	}
+// }
+
 
 /* What each thread is doing
- *
- * In principle this is an endless loop. The only time this loop gets
- * interrupted is once thpool_destroy() is invoked or the program exits.
- *
- * @param  thread        thread that will run this function
- * @return nothing
- */
-static void *thread_do(struct thread *thread_p) {
+*
+* In principle this is an endless loop. The only time this loop gets interrupted is once
+* thpool_destroy() is invoked or the program exits.
+*
+* @param  thread        thread that will run this function
+* @return nothing
+*/
+static void* thread_do(struct thread* thread_p){
+
+// Although MigW-W64 support pthread_setname_np, it hard to use in this case
+// 	/* Set thread name for profiling and debugging */
+// 	char thread_name[16] = {0};
+
+// 	snprintf(thread_name, 16, TOSTRING(THPOOL_THREAD_NAME) "-%d", thread_p->id);
+
+// #if defined(__linux__)
+// 	/* Use prctl instead to prevent using _GNU_SOURCE flag and implicit declaration */
+// 	prctl(PR_SET_NAME, thread_name);
+// #elif defined(__APPLE__) && defined(__MACH__)
+// 	pthread_setname_np(thread_name);
+// #elif defined(__FreeBSD__) || defined(__OpenBSD__)
+//     pthread_set_name_np(thread_p->pthread, thread_name);
+// #else
+// 	err("thread_do(): pthread_setname_np is not supported on this system");
+// #endif
+
+	/* Assure all threads have been created before starting serving */
+	thpool_* thpool_p = thread_p->thpool_p;
+
+	// disable thpool pause function module
+	// /* Register signal handler */
+	// struct sigaction act;
+	// sigemptyset(&act.sa_mask);
+	// act.sa_flags = SA_ONSTACK;
+	// act.sa_handler = thread_hold;
+	// if (sigaction(SIGUSR1, &act, NULL) == -1) {
+	// 	err("thread_do(): cannot handle SIGUSR1");
+	// }
+
+	/* Mark thread as alive (initialized) */
+	pthread_mutex_lock(&thpool_p->thcount_lock);
+	thpool_p->num_threads_alive += 1;
+	pthread_mutex_unlock(&thpool_p->thcount_lock);
+
+	while(threads_keepalive){
+
+		bsem_wait(thpool_p->jobqueue.has_jobs);
+
+		if (threads_keepalive){
+
+			pthread_mutex_lock(&thpool_p->thcount_lock);
+			thpool_p->num_threads_working++;
+			pthread_mutex_unlock(&thpool_p->thcount_lock);
+
+			/* Read job from queue and execute it */
+			void (*func_buff)(void*);
+			void*  arg_buff;
+			job* job_p = jobqueue_pull(&thpool_p->jobqueue);
+			if (job_p) {
+				func_buff = job_p->function;
+				arg_buff  = job_p->arg;
+				func_buff(arg_buff);
+				free(job_p);
+			}
+
+			pthread_mutex_lock(&thpool_p->thcount_lock);
+			thpool_p->num_threads_working--;
+			if (!thpool_p->num_threads_working) {
+				pthread_cond_signal(&thpool_p->threads_all_idle);
+			}
+			pthread_mutex_unlock(&thpool_p->thcount_lock);
+
+		}
+	}
+	pthread_mutex_lock(&thpool_p->thcount_lock);
+	thpool_p->num_threads_alive --;
+	pthread_mutex_unlock(&thpool_p->thcount_lock);
+
+	return NULL;
+}
 
-  /* Set thread name for profiling and debugging */
-  char thread_name[16] = {0};
 
-  snprintf(thread_name, 16, TOSTRING(THPOOL_THREAD_NAME) "-%d", thread_p->id);
+/* Frees a thread  */
+static void thread_destroy (thread* thread_p){
+	free(thread_p);
+}
+
 
-#if defined(__linux__)
-  /* Use prctl instead to prevent using _GNU_SOURCE flag and implicit
-   * declaration */
-  prctl(PR_SET_NAME, thread_name);
-#elif defined(__APPLE__) && defined(__MACH__)
-  pthread_setname_np(thread_name);
-#elif defined(__FreeBSD__) || defined(__OpenBSD__)
-  pthread_set_name_np(thread_p->pthread, thread_name);
-#else
-  err("thread_do(): pthread_setname_np is not supported on this system");
-#endif
 
-  /* Assure all threads have been created before starting serving */
-  thpool_ *thpool_p = thread_p->thpool_p;
-
-  /* Register signal handler */
-  struct sigaction act;
-  sigemptyset(&act.sa_mask);
-  act.sa_flags = SA_ONSTACK;
-  act.sa_handler = thread_hold;
-  if (sigaction(SIGUSR1, &act, NULL) == -1) {
-    err("thread_do(): cannot handle SIGUSR1");
-  }
-
-  /* Mark thread as alive (initialized) */
-  pthread_mutex_lock(&thpool_p->thcount_lock);
-  thpool_p->num_threads_alive += 1;
-  pthread_mutex_unlock(&thpool_p->thcount_lock);
-
-  while (threads_keepalive) {
-
-    bsem_wait(thpool_p->jobqueue.has_jobs);
-
-    if (threads_keepalive) {
-
-      pthread_mutex_lock(&thpool_p->thcount_lock);
-      thpool_p->num_threads_working++;
-      pthread_mutex_unlock(&thpool_p->thcount_lock);
-
-      /* Read job from queue and execute it */
-      void (*func_buff)(void *);
-      void *arg_buff;
-      job *job_p = jobqueue_pull(&thpool_p->jobqueue);
-      if (job_p) {
-        func_buff = job_p->function;
-        arg_buff = job_p->arg;
-        func_buff(arg_buff);
-        free(job_p);
-      }
-
-      pthread_mutex_lock(&thpool_p->thcount_lock);
-      thpool_p->num_threads_working--;
-      if (!thpool_p->num_threads_working) {
-        pthread_cond_signal(&thpool_p->threads_all_idle);
-      }
-      pthread_mutex_unlock(&thpool_p->thcount_lock);
-    }
-  }
-  pthread_mutex_lock(&thpool_p->thcount_lock);
-  thpool_p->num_threads_alive--;
-  pthread_mutex_unlock(&thpool_p->thcount_lock);
-
-  return NULL;
-}
 
-/* Frees a thread  */
-static void thread_destroy(thread *thread_p) { free(thread_p); }
 
 /* ============================ JOB QUEUE =========================== */
 
+
 /* Initialize queue */
-static int jobqueue_init(jobqueue *jobqueue_p) {
-  jobqueue_p->len = 0;
-  jobqueue_p->front = NULL;
-  jobqueue_p->rear = NULL;
+static int jobqueue_init(jobqueue* jobqueue_p){
+	jobqueue_p->len = 0;
+	jobqueue_p->front = NULL;
+	jobqueue_p->rear  = NULL;
 
-  jobqueue_p->has_jobs = (struct bsem *)malloc(sizeof(struct bsem));
-  if (jobqueue_p->has_jobs == NULL) {
-    return -1;
-  }
+	jobqueue_p->has_jobs = (struct bsem*)malloc(sizeof(struct bsem));
+	if (jobqueue_p->has_jobs == NULL){
+		return -1;
+	}
 
-  pthread_mutex_init(&(jobqueue_p->rwmutex), NULL);
-  bsem_init(jobqueue_p->has_jobs, 0);
+	pthread_mutex_init(&(jobqueue_p->rwmutex), NULL);
+	bsem_init(jobqueue_p->has_jobs, 0);
 
-  return 0;
+	return 0;
 }
 
+
 /* Clear the queue */
-static void jobqueue_clear(jobqueue *jobqueue_p) {
+static void jobqueue_clear(jobqueue* jobqueue_p){
+
+	while(jobqueue_p->len){
+		free(jobqueue_pull(jobqueue_p));
+	}
 
-  while (jobqueue_p->len) {
-    free(jobqueue_pull(jobqueue_p));
-  }
+	jobqueue_p->front = NULL;
+	jobqueue_p->rear  = NULL;
+	bsem_reset(jobqueue_p->has_jobs);
+	jobqueue_p->len = 0;
 
-  jobqueue_p->front = NULL;
-  jobqueue_p->rear = NULL;
-  bsem_reset(jobqueue_p->has_jobs);
-  jobqueue_p->len = 0;
 }
 
+
 /* Add (allocated) job to queue
  */
-static void jobqueue_push(jobqueue *jobqueue_p, struct job *newjob) {
+static void jobqueue_push(jobqueue* jobqueue_p, struct job* newjob){
+
+	pthread_mutex_lock(&jobqueue_p->rwmutex);
+	newjob->prev = NULL;
 
-  pthread_mutex_lock(&jobqueue_p->rwmutex);
-  newjob->prev = NULL;
+	switch(jobqueue_p->len){
 
-  switch (jobqueue_p->len) {
+		case 0:  /* if no jobs in queue */
+					jobqueue_p->front = newjob;
+					jobqueue_p->rear  = newjob;
+					break;
 
-  case 0: /* if no jobs in queue */
-    jobqueue_p->front = newjob;
-    jobqueue_p->rear = newjob;
-    break;
+		default: /* if jobs in queue */
+					jobqueue_p->rear->prev = newjob;
+					jobqueue_p->rear = newjob;
 
-  default: /* if jobs in queue */
-    jobqueue_p->rear->prev = newjob;
-    jobqueue_p->rear = newjob;
-  }
-  jobqueue_p->len++;
+	}
+	jobqueue_p->len++;
 
-  bsem_post(jobqueue_p->has_jobs);
-  pthread_mutex_unlock(&jobqueue_p->rwmutex);
+	bsem_post(jobqueue_p->has_jobs);
+	pthread_mutex_unlock(&jobqueue_p->rwmutex);
 }
 
+
 /* Get first job from queue(removes it from queue)
  * Notice: Caller MUST hold a mutex
  */
-static struct job *jobqueue_pull(jobqueue *jobqueue_p) {
+static struct job* jobqueue_pull(jobqueue* jobqueue_p){
+
+	pthread_mutex_lock(&jobqueue_p->rwmutex);
+	job* job_p = jobqueue_p->front;
 
-  pthread_mutex_lock(&jobqueue_p->rwmutex);
-  job *job_p = jobqueue_p->front;
+	switch(jobqueue_p->len){
 
-  switch (jobqueue_p->len) {
+		case 0:  /* if no jobs in queue */
+		  			break;
 
-  case 0: /* if no jobs in queue */
-    break;
+		case 1:  /* if one job in queue */
+					jobqueue_p->front = NULL;
+					jobqueue_p->rear  = NULL;
+					jobqueue_p->len = 0;
+					break;
 
-  case 1: /* if one job in queue */
-    jobqueue_p->front = NULL;
-    jobqueue_p->rear = NULL;
-    jobqueue_p->len = 0;
-    break;
+		default: /* if >1 jobs in queue */
+					jobqueue_p->front = job_p->prev;
+					jobqueue_p->len--;
+					/* more than one job in queue -> post it */
+					bsem_post(jobqueue_p->has_jobs);
 
-  default: /* if >1 jobs in queue */
-    jobqueue_p->front = job_p->prev;
-    jobqueue_p->len--;
-    /* more than one job in queue -> post it */
-    bsem_post(jobqueue_p->has_jobs);
-  }
+	}
 
-  pthread_mutex_unlock(&jobqueue_p->rwmutex);
-  return job_p;
+	pthread_mutex_unlock(&jobqueue_p->rwmutex);
+	return job_p;
 }
 
+
 /* Free all queue resources back to the system */
-static void jobqueue_destroy(jobqueue *jobqueue_p) {
-  jobqueue_clear(jobqueue_p);
-  free(jobqueue_p->has_jobs);
+static void jobqueue_destroy(jobqueue* jobqueue_p){
+	jobqueue_clear(jobqueue_p);
+	free(jobqueue_p->has_jobs);
 }
 
+
+
+
+
 /* ======================== SYNCHRONISATION ========================= */
 
+
 /* Init semaphore to 1 or 0 */
 static void bsem_init(bsem *bsem_p, int value) {
-  if (value < 0 || value > 1) {
-    err("bsem_init(): Binary semaphore can take only values 1 or 0");
-    exit(1);
-  }
-  pthread_mutex_init(&(bsem_p->mutex), NULL);
-  pthread_cond_init(&(bsem_p->cond), NULL);
-  bsem_p->v = value;
+	if (value < 0 || value > 1) {
+		err("bsem_init(): Binary semaphore can take only values 1 or 0");
+		exit(1);
+	}
+	pthread_mutex_init(&(bsem_p->mutex), NULL);
+	pthread_cond_init(&(bsem_p->cond), NULL);
+	bsem_p->v = value;
 }
 
+
 /* Reset semaphore to 0 */
 static void bsem_reset(bsem *bsem_p) {
-  pthread_mutex_destroy(&(bsem_p->mutex));
-  pthread_cond_destroy(&(bsem_p->cond));
-  bsem_init(bsem_p, 0);
+	pthread_mutex_destroy(&(bsem_p->mutex));
+	pthread_cond_destroy(&(bsem_p->cond));
+	bsem_init(bsem_p, 0);
 }
 
+
 /* Post to at least one thread */
 static void bsem_post(bsem *bsem_p) {
-  pthread_mutex_lock(&bsem_p->mutex);
-  bsem_p->v = 1;
-  pthread_cond_signal(&bsem_p->cond);
-  pthread_mutex_unlock(&bsem_p->mutex);
+	pthread_mutex_lock(&bsem_p->mutex);
+	bsem_p->v = 1;
+	pthread_cond_signal(&bsem_p->cond);
+	pthread_mutex_unlock(&bsem_p->mutex);
 }
 
+
 /* Post to all threads */
 static void bsem_post_all(bsem *bsem_p) {
-  pthread_mutex_lock(&bsem_p->mutex);
-  bsem_p->v = 1;
-  pthread_cond_broadcast(&bsem_p->cond);
-  pthread_mutex_unlock(&bsem_p->mutex);
+	pthread_mutex_lock(&bsem_p->mutex);
+	bsem_p->v = 1;
+	pthread_cond_broadcast(&bsem_p->cond);
+	pthread_mutex_unlock(&bsem_p->mutex);
 }
 
+
 /* Wait on semaphore until semaphore has value 0 */
-static void bsem_wait(bsem *bsem_p) {
-  pthread_mutex_lock(&bsem_p->mutex);
-  while (bsem_p->v != 1) {
-    pthread_cond_wait(&bsem_p->cond, &bsem_p->mutex);
-  }
-  bsem_p->v = 0;
-  pthread_mutex_unlock(&bsem_p->mutex);
+static void bsem_wait(bsem* bsem_p) {
+	pthread_mutex_lock(&bsem_p->mutex);
+	while (bsem_p->v != 1) {
+		pthread_cond_wait(&bsem_p->cond, &bsem_p->mutex);
+	}
+	bsem_p->v = 0;
+	pthread_mutex_unlock(&bsem_p->mutex);
 }
diff --git a/C-Thread-Pool/thpool.h b/C-Thread-Pool/thpool.h
index 8191721..e82b7b2 100644
--- a/C-Thread-Pool/thpool.h
+++ b/C-Thread-Pool/thpool.h
@@ -11,10 +11,11 @@
 extern "C" {
 #endif
 
-/* =================================== API
- * ======================================= */
+/* =================================== API ======================================= */
+
+
+typedef struct thpool_* threadpool;
 
-typedef struct thpool_ *threadpool;
 
 /**
  * @brief  Initialize threadpool
@@ -26,8 +27,7 @@ typedef struct thpool_ *threadpool;
  *
  *    ..
  *    threadpool thpool;                     //First we declare a threadpool
- *    thpool = thpool_init(4);               //then we initialize it to 4
- * threads
+ *    thpool = thpool_init(4);               //then we initialize it to 4 threads
  *    ..
  *
  * @param  num_threads   number of threads to be created in the threadpool
@@ -36,6 +36,7 @@ typedef struct thpool_ *threadpool;
  */
 threadpool thpool_init(int num_threads);
 
+
 /**
  * @brief Add work to the job queue
  *
@@ -63,7 +64,8 @@ threadpool thpool_init(int num_threads);
  * @param  arg_p         pointer to an argument
  * @return 0 on success, -1 otherwise.
  */
-int thpool_add_work(threadpool, void (*function_p)(void *), void *arg_p);
+int thpool_add_work(threadpool, void (*function_p)(void*), void* arg_p);
+
 
 /**
  * @brief Wait for all queued jobs to finish
@@ -94,6 +96,7 @@ int thpool_add_work(threadpool, void (*function_p)(void *), void *arg_p);
  */
 void thpool_wait(threadpool);
 
+
 /**
  * @brief Pauses all threads immediately
  *
@@ -115,7 +118,9 @@ void thpool_wait(threadpool);
  * @param threadpool    the threadpool where the threads should be paused
  * @return nothing
  */
-void thpool_pause(threadpool);
+// disable thpool pause function module
+// void thpool_pause(threadpool);
+
 
 /**
  * @brief Unpauses all threads if they are paused
@@ -130,7 +135,9 @@ void thpool_pause(threadpool);
  * @param threadpool     the threadpool where the threads should be unpaused
  * @return nothing
  */
-void thpool_resume(threadpool);
+// disable thpool pause function module
+// void thpool_resume(threadpool);
+
 
 /**
  * @brief Destroy the threadpool
@@ -153,6 +160,7 @@ void thpool_resume(threadpool);
  */
 void thpool_destroy(threadpool);
 
+
 /**
  * @brief Show currently working threads
  *
@@ -173,6 +181,7 @@ void thpool_destroy(threadpool);
  */
 int thpool_num_threads_working(threadpool);
 
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/caddy/frankenphp/Makefile b/caddy/frankenphp/Makefile
new file mode 100644
index 0000000..fdfc8a4
--- /dev/null
+++ b/caddy/frankenphp/Makefile
@@ -0,0 +1,13 @@
+PHP_PATH=C:/msys64-new/usr/local/include/php
+INCLUDES=-I$(PHP_PATH) -I$(PHP_PATH)/main -I$(PHP_PATH)/TSRM -I$(PHP_PATH)/Zend -I$(PHP_PATH)/ext
+MACROS=-D_WINDOWS -DWINDOWS=1 -DZEND_WIN32=1 -DPHP_WIN32=1 -DWIN32 -D_MBCS -D_USE_MATH_DEFINES -DNDebug -DNDEBUG -DZEND_DEBUG=0 -DZTS=1 -DFD_SETSIZE=256
+GCCMACROS=-D_POSIX
+CGOCFLAGS=$(INCLUDES) $(MACROS) $(GCCMACROS)
+LDPATH=-LC:/msys64-new/usr/local/lib
+CGOLDFLAGS=$(LDPATH) -lphp8ts -lphp8embed -lbrotlicommon -lbrotlidec -lbrotlienc
+
+build:
+	CGO_CFLAGS="$(CGOCFLAGS)" CGO_LDFLAGS="$(CGOLDFLAGS)" go build -a -x
+
+clean:
+	rm -r *.exe
\ No newline at end of file
diff --git a/caddy/go.mod b/caddy/go.mod
index 273bd4b..8daf032 100644
--- a/caddy/go.mod
+++ b/caddy/go.mod
@@ -2,7 +2,7 @@ module github.com/dunglas/frankenphp/caddy
 
 go 1.21
 
-toolchain go1.22.0
+// toolchain go1.22.0
 
 replace github.com/dunglas/frankenphp => ../
 
diff --git a/frankenphp.c b/frankenphp.c
index e2b7bfa..fd964b7 100644
--- a/frankenphp.c
+++ b/frankenphp.c
@@ -7,7 +7,11 @@
 #include <ext/spl/spl_exceptions.h>
 #include <ext/standard/head.h>
 #include <php.h>
-#include <php_config.h>
+#ifdef PHP_WIN32
+#  include <config.w32.h>
+#else
+#  include <php_config.h>
+#endif
 #include <php_main.h>
 #include <php_output.h>
 #include <php_variables.h>
@@ -729,14 +733,15 @@ sapi_module_struct frankenphp_sapi_module = {
 static void *manager_thread(void *arg) {
   // SIGPIPE must be masked in non-Go threads:
   // https://pkg.go.dev/os/signal#hdr-Go_programs_that_use_cgo_or_SWIG
-  sigset_t set;
-  sigemptyset(&set);
-  sigaddset(&set, SIGPIPE);
-
-  if (pthread_sigmask(SIG_BLOCK, &set, NULL) != 0) {
-    perror("failed to block SIGPIPE");
-    exit(EXIT_FAILURE);
-  }
+  // But windows does no support SIGPIPE
+  // sigset_t set;
+  // sigemptyset(&set);
+  // sigaddset(&set, SIGPIPE);
+
+  // if (pthread_sigmask(SIG_BLOCK, &set, NULL) != 0) {
+  //   perror("failed to block SIGPIPE");
+  //   exit(EXIT_FAILURE);
+  // }
 
   int num_threads = *((int *)arg);
   free(arg);
diff --git a/frankenphp.go b/frankenphp.go
index 15b8f7c..8fb7a99 100644
--- a/frankenphp.go
+++ b/frankenphp.go
@@ -5,10 +5,6 @@
 // [FrankenPHP app server]: https://frankenphp.dev
 package frankenphp
 
-//go:generate rm -Rf C-Thread-Pool/
-//go:generate git clone --depth=1 git@github.com:Pithikos/C-Thread-Pool.git
-//go:generate rm -Rf C-Thread-Pool/.git C-Thread-Pool/.github C-Thread-Pool/docs C-Thread-Pool/tests C-Thread-Pool/example.c
-
 // Use PHP includes corresponding to your PHP installation by running:
 //
 //   export CGO_CFLAGS=$(php-config --includes)
@@ -17,14 +13,12 @@ package frankenphp
 // We also set these flags for hardening: https://github.com/docker-library/php/blob/master/8.2/bookworm/zts/Dockerfile#L57-L59
 
 // #cgo darwin pkg-config: libxml-2.0
-// #cgo CFLAGS: -Wall -Werror -fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
-// #cgo CFLAGS: -I/usr/local/include/php -I/usr/local/include/php/main -I/usr/local/include/php/TSRM -I/usr/local/include/php/Zend -I/usr/local/include/php/ext -I/usr/local/include/php/ext/date/lib
+// #cgo CFLAGS: -fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
 // #cgo CFLAGS: -DTHREAD_NAME=frankenphp
-// #cgo linux CFLAGS: -D_GNU_SOURCE
 // #cgo CPPFLAGS: -fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
 // #cgo darwin LDFLAGS: -L/opt/homebrew/opt/libiconv/lib -liconv
 // #cgo linux LDFLAGS: -Wl,-O1 -lresolv
-// #cgo LDFLAGS: -pie -L/usr/local/lib -L/usr/lib -lphp -ldl -lm -lutil
+// #cgo LDFLAGS: -pie
 // #include <stdlib.h>
 // #include <stdint.h>
 // #include <php_variables.h>
@@ -590,6 +584,10 @@ func go_register_variables(rh C.uintptr_t, trackVarsArray *C.zval) {
 	}
 
 	for k, v := range fc.env {
+		if _, ok := knownServerKeys[k]; ok {
+			fmt.Printf("in knownServerKeys\n")
+		}
+		
 		if _, ok := knownServerKeys[k]; ok {
 			continue
 		}
diff --git a/go.mod b/go.mod
index 17cc546..8d605eb 100644
--- a/go.mod
+++ b/go.mod
@@ -2,7 +2,7 @@ module github.com/dunglas/frankenphp
 
 go 1.21
 
-toolchain go1.22.0
+// toolchain go1.22.0
 
 retract v1.0.0-rc.1 // Human error
 
-- 
2.45.0

