From 6b61d267b0cd5de73de3a32a60027932b433b358 Mon Sep 17 00:00:00 2001
From: TenHian <tenhian.cn@gmail.com>
Date: Fri, 19 Jul 2024 09:41:03 +0800
Subject: [PATCH] Export DLL and adapt to mingw64

---
 Zend/zend_portability.h                  |  6 ++--
 ext/hash/murmur/PMurHash.c               |  2 +-
 ext/hash/murmur/PMurHash128.c            |  2 +-
 ext/hash/xxhash/xxhash.h                 |  2 +-
 ext/opcache/jit/vtune/ittnotify_config.h |  4 +--
 sapi/embed/php_embed.h                   | 12 ++++++--
 win32/codepage.c                         |  6 ++--
 win32/codepage.h                         |  4 +--
 win32/ioutil.h                           | 36 ++++++++++++------------
 9 files changed, 40 insertions(+), 34 deletions(-)

diff --git a/Zend/zend_portability.h b/Zend/zend_portability.h
index 2ed71dac05..5ca128fd02 100644
--- a/Zend/zend_portability.h
+++ b/Zend/zend_portability.h
@@ -88,7 +88,7 @@
 #endif
 
 #if defined(ZEND_WIN32) && !defined(__clang__)
-# define ZEND_ASSUME(c)	__assume(c)
+# define ZEND_ASSUME(c) assert(c)
 #elif defined(__clang__) && __has_builtin(__builtin_assume)
 # pragma clang diagnostic ignored "-Wassume"
 # define ZEND_ASSUME(c)	__builtin_assume(c)
@@ -291,7 +291,7 @@ char *alloca();
 #elif defined(_MSC_VER) && defined(_M_IX86) && _MSC_VER == 1700
 # define ZEND_FASTCALL __fastcall
 #elif defined(_MSC_VER) && _MSC_VER >= 1800 && !defined(__clang__)
-# define ZEND_FASTCALL __vectorcall
+# define ZEND_FASTCALL __fastcall
 #else
 # define ZEND_FASTCALL
 #endif
@@ -342,7 +342,7 @@ char *alloca();
 #   define zend_never_inline
 #  endif
 # elif defined(_MSC_VER)
-#  define zend_always_inline __forceinline
+#  define zend_always_inline inline
 #  define zend_never_inline __declspec(noinline)
 # else
 #  if __has_attribute(always_inline)
diff --git a/ext/hash/murmur/PMurHash.c b/ext/hash/murmur/PMurHash.c
index 0716ca13c8..43c90ee0fe 100644
--- a/ext/hash/murmur/PMurHash.c
+++ b/ext/hash/murmur/PMurHash.c
@@ -69,7 +69,7 @@ on big endian machines, or a byte-by-byte read if the endianess is unknown.
 
 /* Find best way to ROTL */
 #if defined(_MSC_VER)
-  #define FORCE_INLINE  static __forceinline
+  #define FORCE_INLINE  static inline
   #include <stdlib.h>  /* Microsoft put _rotl declaration in here */
   #define ROTL32(x,y)  _rotl(x,y)
 #else
diff --git a/ext/hash/murmur/PMurHash128.c b/ext/hash/murmur/PMurHash128.c
index 4425f81575..51c5f5190d 100644
--- a/ext/hash/murmur/PMurHash128.c
+++ b/ext/hash/murmur/PMurHash128.c
@@ -61,7 +61,7 @@ on big endian machines.
 
 /* Find best way to ROTL */
 #if defined(_MSC_VER)
-  #define FORCE_INLINE  static __forceinline
+  #define FORCE_INLINE  static inline
   #include <stdlib.h>  /* Microsoft put _rotl declaration in here */
   #define ROTL32(x,y)  _rotl(x,y)
   #define ROTL64(x,y)  _rotl64(x,y)
diff --git a/ext/hash/xxhash/xxhash.h b/ext/hash/xxhash/xxhash.h
index 8e816c0584..79c2539613 100644
--- a/ext/hash/xxhash/xxhash.h
+++ b/ext/hash/xxhash/xxhash.h
@@ -1530,7 +1530,7 @@ static void* XXH_memcpy(void* dest, const void* src, size_t size)
 #  define XXH_FORCE_INLINE static __inline__ __attribute__((always_inline, unused))
 #  define XXH_NO_INLINE static __attribute__((noinline))
 #elif defined(_MSC_VER)  /* Visual Studio */
-#  define XXH_FORCE_INLINE static __forceinline
+#  define XXH_FORCE_INLINE static inline
 #  define XXH_NO_INLINE static __declspec(noinline)
 #elif defined (__cplusplus) \
   || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L))   /* C99 */
diff --git a/ext/opcache/jit/vtune/ittnotify_config.h b/ext/opcache/jit/vtune/ittnotify_config.h
index fc3a476cdd..a63b543016 100644
--- a/ext/opcache/jit/vtune/ittnotify_config.h
+++ b/ext/opcache/jit/vtune/ittnotify_config.h
@@ -161,8 +161,8 @@
 #define LIBITTAPI_CALL ITTAPI_CDECL
 
 #if ITT_PLATFORM==ITT_PLATFORM_WIN
-/* use __forceinline (VC++ specific) */
-#define ITT_INLINE           __forceinline
+/* use inline (VC++ specific) */
+#define ITT_INLINE           inline
 #define ITT_INLINE_ATTRIBUTE /* nothing */
 #else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */
 /*
diff --git a/sapi/embed/php_embed.h b/sapi/embed/php_embed.h
index 3a4844629d..3a60891ab4 100644
--- a/sapi/embed/php_embed.h
+++ b/sapi/embed/php_embed.h
@@ -35,10 +35,16 @@
   php_embed_shutdown(); \
 }
 
-#ifndef PHP_WIN32
-    #define EMBED_SAPI_API SAPI_API
+// #ifndef PHP_WIN32
+//     #define EMBED_SAPI_API SAPI_API
+// #else
+//     #define EMBED_SAPI_API
+// #endif
+
+#ifndef __MINGW64__
+    #define EMBED_SAPI_API __declspec(dllexport)
 #else
-    #define EMBED_SAPI_API
+    #define EMBED_SAPI_API __declspec(dllimport)
 #endif
 
 #ifdef ZTS
diff --git a/win32/codepage.c b/win32/codepage.c
index 69b6a44aa9..fa4fd625fd 100644
--- a/win32/codepage.c
+++ b/win32/codepage.c
@@ -35,7 +35,7 @@ ZEND_TLS const struct php_win32_cp *orig_in_cp = NULL;
 
 #include "cp_enc_map.c"
 
-__forceinline static wchar_t *php_win32_cp_to_w_int(const char* in, size_t in_len, size_t *out_len, UINT cp, DWORD flags)
+inline static wchar_t *php_win32_cp_to_w_int(const char* in, size_t in_len, size_t *out_len, UINT cp, DWORD flags)
 {/*{{{*/
 	wchar_t *ret;
 	int ret_len, tmp_len;
@@ -241,7 +241,7 @@ PW32CP wchar_t *php_win32_cp_conv_ascii_to_w(const char* in, size_t in_len, size
 }/*}}}*/
 #undef ASCII_FAIL_RETURN
 
-__forceinline static char *php_win32_cp_from_w_int(const wchar_t* in, size_t in_len, size_t *out_len, UINT cp, DWORD flags)
+inline static char *php_win32_cp_from_w_int(const wchar_t* in, size_t in_len, size_t *out_len, UINT cp, DWORD flags)
 {/*{{{*/
 	int r;
 	int target_len, tmp_len;
@@ -306,7 +306,7 @@ PW32CP char *php_win32_cp_conv_from_w(DWORD cp, DWORD flags, const wchar_t* in,
 }/*}}}*/
 
 /* This is only usable after the startup phase*/
-__forceinline static char *php_win32_cp_get_enc(void)
+inline static char *php_win32_cp_get_enc(void)
 {/*{{{*/
 	char *enc = NULL;
 	const zend_encoding *zenc;
diff --git a/win32/codepage.h b/win32/codepage.h
index e69bf7cdc9..632f0dad16 100644
--- a/win32/codepage.h
+++ b/win32/codepage.h
@@ -76,7 +76,7 @@ PW32CP wchar_t *php_win32_cp_env_any_to_w(const char* env);
 /* This function tries to make the best guess to convert any
    given string to a wide char, also preferring the fastest code
    path to unicode. It returns NULL on fail. */
-__forceinline static wchar_t *php_win32_cp_conv_any_to_w(const char* in, size_t in_len, size_t *out_len)
+inline static wchar_t *php_win32_cp_conv_any_to_w(const char* in, size_t in_len, size_t *out_len)
 {/*{{{*/
 	wchar_t *ret = NULL;
 
@@ -117,7 +117,7 @@ __forceinline static wchar_t *php_win32_cp_conv_any_to_w(const char* in, size_t
 /* This function converts from unicode function output back to PHP. If
 	the PHP's current charset is not compatible with unicode, so the currently
 	configured CP will be used. */
-__forceinline static char *php_win32_cp_conv_w_to_any(const wchar_t* in, size_t in_len, size_t *out_len)
+inline static char *php_win32_cp_conv_w_to_any(const wchar_t* in, size_t in_len, size_t *out_len)
 {/*{{{*/
 	return php_win32_cp_conv_w_to_cur(in, in_len, out_len);
 }/*}}}*/
diff --git a/win32/ioutil.h b/win32/ioutil.h
index d92e3fb8f5..34b9977f8b 100644
--- a/win32/ioutil.h
+++ b/win32/ioutil.h
@@ -177,7 +177,7 @@ BOOL php_win32_ioutil_init(void);
 
 /* Keep these functions aliased for case some additional handling
    is needed later. */
-__forceinline static wchar_t *php_win32_ioutil_conv_any_to_w(const char* in, size_t in_len, size_t *out_len)
+inline static wchar_t *php_win32_ioutil_conv_any_to_w(const char* in, size_t in_len, size_t *out_len)
 {/*{{{*/
 	wchar_t *mb, *ret;
 	size_t mb_len;
@@ -251,7 +251,7 @@ __forceinline static wchar_t *php_win32_ioutil_conv_any_to_w(const char* in, siz
 #define php_win32_ioutil_cur_to_w php_win32_cp_cur_to_w
 #define php_win32_ioutil_w_to_any php_win32_cp_w_to_any
 #define php_win32_ioutil_conv_w_to_any php_win32_cp_conv_w_to_any
-/*__forceinline static char *php_win32_ioutil_w_to_any(wchar_t* w_source_ptr)
+/*inline static char *php_win32_ioutil_w_to_any(wchar_t* w_source_ptr)
 {
 	return php_win32_cp_w_to_any(w_source_ptr);
 }*/
@@ -275,7 +275,7 @@ PW32IO wchar_t *php_win32_ioutil_realpath_w_ex0(const wchar_t *path, wchar_t *re
 PW32IO int php_win32_ioutil_symlink_w(const wchar_t *target, const wchar_t *link);
 PW32IO int php_win32_ioutil_link_w(const wchar_t *target, const wchar_t *link);
 
-__forceinline static int php_win32_ioutil_access(const char *path, mode_t mode)
+inline static int php_win32_ioutil_access(const char *path, mode_t mode)
 {/*{{{*/
 	PHP_WIN32_IOUTIL_INIT_W(path)
 	int ret, err;
@@ -300,7 +300,7 @@ __forceinline static int php_win32_ioutil_access(const char *path, mode_t mode)
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_open(const char *path, int flags, ...)
+inline static int php_win32_ioutil_open(const char *path, int flags, ...)
 {/*{{{*/
 	mode_t mode = 0;
 	PHP_WIN32_IOUTIL_INIT_W(path)
@@ -335,7 +335,7 @@ __forceinline static int php_win32_ioutil_open(const char *path, int flags, ...)
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_unlink(const char *path)
+inline static int php_win32_ioutil_unlink(const char *path)
 {/*{{{*/
 	PHP_WIN32_IOUTIL_INIT_W(path)
 	int ret = -1;
@@ -359,7 +359,7 @@ __forceinline static int php_win32_ioutil_unlink(const char *path)
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_rmdir(const char *path)
+inline static int php_win32_ioutil_rmdir(const char *path)
 {/*{{{*/
 	PHP_WIN32_IOUTIL_INIT_W(path)
 	int ret = 0;
@@ -386,7 +386,7 @@ __forceinline static int php_win32_ioutil_rmdir(const char *path)
 	return ret;
 }/*}}}*/
 
-__forceinline static FILE *php_win32_ioutil_fopen(const char *patha, const char *modea)
+inline static FILE *php_win32_ioutil_fopen(const char *patha, const char *modea)
 {/*{{{*/
 	FILE *ret;
 	wchar_t modew[16] = {0};
@@ -418,7 +418,7 @@ __forceinline static FILE *php_win32_ioutil_fopen(const char *patha, const char
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_rename(const char *oldnamea, const char *newnamea)
+inline static int php_win32_ioutil_rename(const char *oldnamea, const char *newnamea)
 {/*{{{*/
 	wchar_t *oldnamew;
 	wchar_t *newnamew;
@@ -462,7 +462,7 @@ __forceinline static int php_win32_ioutil_rename(const char *oldnamea, const cha
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_chdir(const char *patha)
+inline static int php_win32_ioutil_chdir(const char *patha)
 {/*{{{*/
 	int ret;
 	wchar_t *pathw = php_win32_ioutil_any_to_w(patha);
@@ -487,7 +487,7 @@ __forceinline static int php_win32_ioutil_chdir(const char *patha)
 	return ret;
 }/*}}}*/
 
-__forceinline static char *php_win32_ioutil_getcwd(char *buf, size_t len)
+inline static char *php_win32_ioutil_getcwd(char *buf, size_t len)
 {/*{{{*/
 	wchar_t tmp_bufw[PHP_WIN32_IOUTIL_MAXPATHLEN];
 	char *tmp_bufa = NULL;
@@ -527,7 +527,7 @@ __forceinline static char *php_win32_ioutil_getcwd(char *buf, size_t len)
 }/*}}}*/
 
 /* TODO improve with usage of native APIs, split for _a and _w. */
-__forceinline static int php_win32_ioutil_chmod(const char *patha, int mode)
+inline static int php_win32_ioutil_chmod(const char *patha, int mode)
 {/*{{{*/
 	wchar_t *pathw = php_win32_ioutil_any_to_w(patha);
 	int err = 0;
@@ -554,7 +554,7 @@ __forceinline static int php_win32_ioutil_chmod(const char *patha, int mode)
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_mkdir(const char *path, mode_t mode)
+inline static int php_win32_ioutil_mkdir(const char *path, mode_t mode)
 {/*{{{*/
 	int ret;
 	DWORD err = 0;
@@ -579,7 +579,7 @@ __forceinline static int php_win32_ioutil_mkdir(const char *path, mode_t mode)
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_symlink(const char *target, const char *link)
+inline static int php_win32_ioutil_symlink(const char *target, const char *link)
 {/*{{{*/
 	wchar_t *targetw, *linkw;
 	int ret;
@@ -605,7 +605,7 @@ __forceinline static int php_win32_ioutil_symlink(const char *target, const char
 	return ret;
 }/*}}}*/
 
-__forceinline static int php_win32_ioutil_link(const char *target, const char *link)
+inline static int php_win32_ioutil_link(const char *target, const char *link)
 {/*{{{*/
 	wchar_t *targetw, *linkw;
 	int ret;
@@ -632,7 +632,7 @@ __forceinline static int php_win32_ioutil_link(const char *target, const char *l
 
 PW32IO char *realpath(const char *path, char *resolved);
 
-__forceinline static char *php_win32_ioutil_realpath_ex0(const char *path, char *resolved, PBY_HANDLE_FILE_INFORMATION info)
+inline static char *php_win32_ioutil_realpath_ex0(const char *path, char *resolved, PBY_HANDLE_FILE_INFORMATION info)
 {/*{{{*/
 	wchar_t retw[PHP_WIN32_IOUTIL_MAXPATHLEN];
 	char *reta;
@@ -677,7 +677,7 @@ __forceinline static char *php_win32_ioutil_realpath_ex0(const char *path, char
 	return resolved;
 }/*}}}*/
 
-__forceinline static char *php_win32_ioutil_realpath(const char *path, char *resolved)
+inline static char *php_win32_ioutil_realpath(const char *path, char *resolved)
 {/*{{{*/
 	return php_win32_ioutil_realpath_ex0(path, resolved, NULL);
 }/*}}}*/
@@ -741,7 +741,7 @@ typedef struct {
 PW32IO int php_win32_ioutil_stat_ex_w(const wchar_t *path, size_t path_len, php_win32_ioutil_stat_t *buf, int lstat);
 PW32IO int php_win32_ioutil_fstat(int fd, php_win32_ioutil_stat_t *buf);
 
-__forceinline static int php_win32_ioutil_stat_ex(const char *path, php_win32_ioutil_stat_t *buf, int lstat)
+inline static int php_win32_ioutil_stat_ex(const char *path, php_win32_ioutil_stat_t *buf, int lstat)
 {/*{{{*/
 	size_t pathw_len;
 	wchar_t *pathw = php_win32_ioutil_conv_any_to_w(path, PHP_WIN32_CP_IGNORE_LEN, &pathw_len);
@@ -763,7 +763,7 @@ __forceinline static int php_win32_ioutil_stat_ex(const char *path, php_win32_io
 
 PW32IO ssize_t php_win32_ioutil_readlink_w(const wchar_t *path, wchar_t *buf, size_t buf_len);
 
-__forceinline static ssize_t php_win32_ioutil_readlink(const char *path, char *buf, size_t buf_len)
+inline static ssize_t php_win32_ioutil_readlink(const char *path, char *buf, size_t buf_len)
 {/*{{{*/
 	size_t pathw_len, ret_buf_len;
 	wchar_t *pathw = php_win32_ioutil_conv_any_to_w(path, PHP_WIN32_CP_IGNORE_LEN, &pathw_len);
-- 
2.44.0.windows.1

